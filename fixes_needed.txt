From: WordPress.org Plugin Directory <plugins@wordpress.org>
Date: Mon, 1 Jul 2019 at 01:04


There are issues with your plugin code.

Please read this email in its entirety, address all listed issues, and reply to this email with your corrected code attached (or linked).

Remember in addition to code quality, security and functionality, we require all plugins adhere to our guidelines. If you have not yet, please read them:

* https://developer.wordpress.org/plugins/wordpress-org/detailed-plugin-guidelines/

You will not be able to submit another plugin while this one is being reviewed, so please read the email carefully. We know it can be long, but you must follow the directions at the end as not doing so will result in your review being delayed. It is required for you to read and reply to these emails, and failure to do so will result in significant delays with your plugin being accepted.

## Including your own CURL code

WordPress comes with an extensive HTTP API that should be used instead of creating your own curl calls. It’s both faster and more extensive. It’ll fall back to curl if it has to, but it’ll use a lot of WordPress’ native functionality first.

https://developer.wordpress.org/plugins/http-api/

## Including (or calling) javascript files included in WP core

Your plugin has included (or called it remotely, probably from Google or jquery.com) your own copy of a javascript file that WordPress already includes.

WordPress includes many common javascript files. In order to provide the best compatibility and experience for users, we do not permit the inclusion of those files in your plugin. Instead we require you use the versions that come with WordPress.

To reiterate:

* DO NOT include your own copy of javascript files that are already included in WordPress Core
* DO NOT make remote calls to javascript files that are already included in WordPress Core

Please review the following link to understand how to properly include javascript, learn what files we provide out of the box, and update your plugin accordingly:

https://developer.wordpress.org/reference/functions/wp_enqueue_script/

It’s fine to locally include add-ons not in core, but please ONLY add those additional files. You do not need the whole jquery UI library for one file.

If your code doesn't work with the built-in versions of jQuery, it's most likely a noConflict issue.

Some examples from your plugin:

woocommerce-sms-voice-notification/xoxzo_cloudphp/vendor/phpunit/php-code-coverage/src/CodeCoverage/Report/HTML/Renderer/Template/js/jquery.min.js

## Please sanitize, escape, and validate your POST calls

When you include POST/GET/REQUEST/FILE calls in your plugin, it's important to sanitize, validate, and escape them. The goal here is to prevent a user from accidentally sending trash data through the system, as well as protecting them from potential security issues.

SANITIZE: Data that is input (either by a user or automatically) must be sanitized. This lessens the possibility of XSS vulnerabilities and MITM attacks where posted data is subverted.

VALIDATE: All data should be validated as much as possible. Even when you sanitize, remember that you don’t want someone putting in ‘dog’ when the only valid values are numbers.

ESCAPE: Data that is output must be escaped properly, so it can't hijack admin screens. There are many esc_*() functions you can use to make sure you don't show people the wrong data.

To help you with this, WordPress comes with a number of sanitization and escaping functions. You can read about those here:

* https://developer.wordpress.org/plugins/security/securing-input/
* https://developer.wordpress.org/plugins/security/securing-output/

Remember: You must use the MOST appropriate functions for the context. If you’re sanitizing email, use sanitize_email(), if you’re outputting HTML, use esc_html(), and so on.

Clean everything, check everything, escape everything, and never trust the users to always have input sane data.

Some examples from your plugin:

woocommerce-sms-voice-notification/admin/XoxzoListTableVoice.php:229: 'tab' => $_POST['tab'],
woocommerce-sms-voice-notification/admin/XoxzoListTableVoice.php:230: 'paged' => $_POST['paged'],
woocommerce-sms-voice-notification/admin/XoxzoListTableVoice.php:282: 'section' => $_POST['section'],

## Setting a default timezone

This is rarely a good idea. People should be able to define their own timezones in WordPress.

Also WordPress explicitly sets and expects the default timezone to be UTC (in settings.php) and the date/time functions sometimes rely on the fact that the default timezone is UTC. For instance if you do date_default_timezone_set(get_option('timezone_string')) and then later try to get a GMT timestamp from get_post_time() or get_post_modified_time(), it will fail to give you the right date.

Some examples from your plugin:

woocommerce-sms-voice-notification/admin/XoxzoSmsResponse.php:245: date_default_timezone_set('UTC');

## Calling file locations poorly

The way your plugin is referencing other files is not going to work with all setups of WordPress.

When you hardcode in paths, or assume that everyone has WordPress in the root of their domain, you cause anyone using 'Giving WordPress it's own directory' (a VERY common setup) to break. In addition, WordPress allows users to change the name of wp-content, so you would break anyone who choses to do so.

Please review the following link and update your plugin accordingly. And don't worry about supporting WordPress 2.x or lower. We don't encourage it nor expect you to do so, so save yourself some time and energy.

* https://developer.wordpress.org/plugins/plugin-basics/determining-plugin-and-content-directories/

Some examples from your plugin:

woocommerce-sms-voice-notification/admin/XoxzoListTableVoice.php:232: site_url( '/wp-admin/admin.php' )
woocommerce-sms-voice-notification/admin/XoxzoListTableVoice.php:287: site_url( '/wp-admin/admin.php' )
woocommerce-sms-voice-notification/admin/XoxzoListTableSms.php:208: site_url( '/wp-admin/admin.php' )

## Incomplete Readme

Your readme is either missing or incomplete.

In some cases, such as for first plugins, ones with dependancies, or plugins that call external services, we require you to provide a complete readme.

Our goal with this is to make sure everyone knows what they're installing and what they need to do before they install it. No surprises. This is especially important if your plugin is making calls to other servers. As such, we need to make sure you're providing the users with all the information they need BEFORE they install your plugin.

Your readme MUST validate per http://wordpress.org/plugins/about/validator/ or we will reject it. Keep in mind, we don't want to see a readme.MD. Among other things, the formatting for markup is different, and the filetype isn't read by our system.

Please create your readme one based on this: https://wordpress.org/plugins/readme.txt

----

Please make sure you've addressed all issues brought up in this email. There is no timeframe on this review, however if we have no response from this email address in 6 months, we will reject this submission. To keep your review active, all we ask is that you make corrections and reply.

When you've corrected your code, REPLY to this email with the updated code attached as a zip, or provide a link to the new code for us to review. If you use gmail, you won’t be able to send a ZIP file if it contains any JS files (yes, we know it’s stupid, blame Google).

If you have questions, concerns, or need clarification, please reply to this email and just ask us.

(While we have tried to make this review as exhaustive as possible we, like you, are humans and may have missed things. As such, we will re-review the ENTIRE plugin when you send it back to us. We appreciate your patience and understanding in this.)


--
WordPress Plugin Review Team | plugins@wordpress.org
https://make.wordpress.org/plugins/
https://developer.wordpress.org/plugins/wordpress-org/detailed-plugin-guidelines/
